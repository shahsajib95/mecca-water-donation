import { createContext, useState, ReactNode, useContext } from "react";

interface LanguageContextType {
  language: "en" | "ar";
  toggleLanguage: (lang: "en" | "ar") => void;
  t: (key: string) => string;
}

const LanguageContext = createContext<LanguageContextType | undefined>(
  undefined
);

const translations = {
  en: {
    live: "LIVE ðŸ”´",
    premium: "ðŸŒŸ Premium",
    subscribeText: "We have subscription. Do you want to subscribe?",
    subscribeBtn: "Subscribe Now",
    logout: "Logout",
    icon1: "Ù…Ø³Ø§Ø¬Ø¯ Ù…ÙƒØ©",
    icon2: "Ù…Ø³Ø§Ø¬Ø¯ Ù…ÙƒØ© Ø§Ù„Ø£ÙƒØ«Ø± Ø­Ø§Ø¬Ø©",
    icon3: "Ø³Ù‚ÙŠØ§ ÙˆØ¥Ø·Ø¹Ø§Ù… Ø§Ù„Ø­Ø±Ù…",
  },
  ar: {
    live: "Ù…Ø¨Ø§Ø´Ø± ðŸ”´",
    premium: "ðŸŒŸ Ø¨Ø±ÙŠÙ…ÙŠÙˆÙ…",
    subscribeText: "Ù„Ø¯ÙŠÙ†Ø§ Ø§Ø´ØªØ±Ø§Ùƒ. Ù‡Ù„ ØªØ±ÙŠØ¯ Ø§Ù„Ø§Ø´ØªØ±Ø§ÙƒØŸ",
    subscribeBtn: "Ø§Ø´ØªØ±Ùƒ Ø§Ù„Ø¢Ù†",
    logout: "ØªØ³Ø¬ÙŠÙ„ Ø§Ù„Ø®Ø±ÙˆØ¬",
    icon1: "Ù…Ø³Ø§Ø¬Ø¯ Ù…ÙƒØ©",
    icon2: "Ù…Ø³Ø§Ø¬Ø¯ Ù…ÙƒØ© Ø§Ù„Ø£ÙƒØ«Ø± Ø­Ø§Ø¬Ø©",
    icon3: "Ø³Ù‚ÙŠØ§ ÙˆØ¥Ø·Ø¹Ø§Ù… Ø§Ù„Ø­Ø±Ù…",
  },
};

export function LanguageProvider({ children }: { children: ReactNode }) {
  const [language, setLanguage] = useState<"en" | "ar">("en");

  const toggleLanguage = (lang: "en" | "ar") => setLanguage(lang);

  const t = (key: string): string => {
    return (
      translations[language][key as keyof (typeof translations)["en"]] || key
    );
  };

  return (
    <LanguageContext.Provider value={{ language, toggleLanguage, t }}>
      {children}
    </LanguageContext.Provider>
  );
}

export function useLanguage() {
  const context = useContext(LanguageContext);
  if (!context)
    throw new Error("useLanguage must be used within LanguageProvider");
  return context;
}
